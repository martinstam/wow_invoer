/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package wow_invoer;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import jssc.SerialPort;

/**
 *
 * @author stam
 */
public class main_wow extends javax.swing.JFrame {

   /**
    * Creates new form main_wow
    */
   public main_wow() {
      initComponents();
      bepaal_frame_location();
      initComponents2();
   }

   /**
    * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form
    * Editor.
    */
   @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      jLabel1 = new javax.swing.JLabel();
      jTextField1 = new javax.swing.JTextField();
      jMenuBar1 = new javax.swing.JMenuBar();
      jMenu1 = new javax.swing.JMenu();
      jMenuItem1 = new javax.swing.JMenuItem();
      jMenu2 = new javax.swing.JMenu();
      jMenuItem3 = new javax.swing.JMenuItem();
      jMenu3 = new javax.swing.JMenu();
      jMenuItem2 = new javax.swing.JMenuItem();

      setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
      addWindowListener(new java.awt.event.WindowAdapter() {
         public void windowClosing(java.awt.event.WindowEvent evt) {
            main_wow_windowClosing(evt);
         }
      });

      jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
      jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wow_invoer/logo_wow_nl.png"))); // NOI18N
      getContentPane().add(jLabel1, java.awt.BorderLayout.CENTER);

      jTextField1.setBackground(new java.awt.Color(204, 255, 255));
      jTextField1.setForeground(new java.awt.Color(0, 0, 204));
      getContentPane().add(jTextField1, java.awt.BorderLayout.PAGE_END);

      jMenu1.setText("File");

      jMenuItem1.setText("Exit");
      jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            File_Exit_menu_item_actionPerformed(evt);
         }
      });
      jMenu1.add(jMenuItem1);

      jMenuBar1.add(jMenu1);

      jMenu2.setText("Edit");

      jMenuItem3.setText("ASTRON");
      jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            Edit_ASTRON_menu_item_actionPerformed(evt);
         }
      });
      jMenu2.add(jMenuItem3);

      jMenuBar1.add(jMenu2);

      jMenu3.setText("Info");

      jMenuItem2.setText("About...");
      jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            Info_About_menu_item_actionPerformed(evt);
         }
      });
      jMenu3.add(jMenuItem2);

      jMenuBar1.add(jMenu3);

      setJMenuBar(jMenuBar1);

      pack();
   }// </editor-fold>//GEN-END:initComponents

   
   
   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/   
   public static void meta_data_from_configuration_regels_into_global_vars()
   {   
      /* put collected meta data from muffin (or configuration file if read muffin failed) into appropriate global vars */
      for (int teller = 0; teller < MAX_AANTAL_CONFIGURATIEREGELS; teller++)
      {
         if ((configuratie_regels[teller] != null) && (configuratie_regels[teller].compareTo("") != 0))
         {
            // communicatie mode (real COM of TCP)
            if (configuratie_regels[teller].indexOf(COMMUNICATION_MODE_TXT) != -1)
            {
               // zo ja, dan staat op een bepaalde pos (achter de : ) de inhoud
               communication_mode = configuratie_regels[teller].substring(CONFIGURATION_FILE_POS_INHOUD);
            }

            // com port name eg (COM5)
            if (configuratie_regels[teller].indexOf(COM_PORT_TXT) != -1)
            {
               COM_port_name = configuratie_regels[teller].substring(CONFIGURATION_FILE_POS_INHOUD);
            }
            
            // TCP host naam
            if (configuratie_regels[teller].indexOf(TCP_HOST_NAME_TXT) != -1)
            {
               TCP_host_name = configuratie_regels[teller].substring(CONFIGURATION_FILE_POS_INHOUD);
            }
            
            // TCP port naam
            if (configuratie_regels[teller].indexOf(TCP_PORT_TXT) != -1)
            {
               TCP_port_name = configuratie_regels[teller].substring(CONFIGURATION_FILE_POS_INHOUD);
            }           
            
         } // if ((configuratie_regels[teller] != null) etc.
      } // for (int teller = 0; teller < MAX_AANTAL_CONFIGURATIEREGELS; teller++)
   }
   
   
   
   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/    
   public void lees_configuratie_regels()
   {
 
      if (user_dir != null)
      {
         new SwingWorker<Void, Void>()
         {
            @Override
            protected Void doInBackground() throws Exception
            {
               int teller;
               String file_line;
               String volledig_path = user_dir + java.io.File.separator + CONFIGURATION_FILE;
      
               for (teller = 0; teller < MAX_AANTAL_CONFIGURATIEREGELS; teller++)
               {
                  configuratie_regels[teller] = "";
               }
      
               /* read all lines from configuration file */
               try
               {
                  BufferedReader in = new BufferedReader(new FileReader(volledig_path));
         
                  teller = 0;
                  while((file_line = in.readLine()) != null)
                  {
                     configuratie_regels[teller] = file_line;
                     teller++;
            
                     /* for safety */
                     if (teller >= MAX_AANTAL_CONFIGURATIEREGELS)
                     {
                        break;
                     }
            
                  } // while((file_line = in.readLine()) != null)
                  in.close();
               } // try
               catch (Exception e)
               {
                  // do nothing, it is possible (at first use) that the file was never created
               } // catch

               /* put collected meta data from configuration file into appropriate global vars */
               meta_data_from_configuration_regels_into_global_vars();

               return null;

            } // protected Void doInBackground() throws Exception

            @Override
            protected void done()
            {
               if (communication_mode.equals(NPORT_REAL_COM_MODE))
               {   
                  RS422_comm.RS422_initComponents();
               }
               else if (communication_mode.equals(NPORT_TCP_MODE))
               {
                  RS422_comm.TCP_initComponents();
               }   
               else
               {
                  String info = "Communication mode unknown";
                  JOptionPane.showMessageDialog(null, info, main_wow.APPLICATION_NAME, JOptionPane.WARNING_MESSAGE);
               }   
            } // protected void done()
         }.execute(); // new SwingWorker<Void, Void>()
      } // if (user_dir != null)
   }
   
   
   
   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/    
   public static void fill_configuratie_array()
   { 
      configuratie_regels[0] = COMMUNICATION_MODE_TXT + communication_mode;
      configuratie_regels[1] = COM_PORT_TXT + COM_port_name; 
      configuratie_regels[2] = TCP_HOST_NAME_TXT + TCP_host_name; 
      configuratie_regels[3] = TCP_PORT_TXT + TCP_port_name; 
      //configuratie_regels[4] =
      //configuratie_regels[5] =
         
   }
   

   
   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/    
   public static void schrijf_configuratie_regels()
   {
      fill_configuratie_array();
      
      new SwingWorker<Void, Void>()
      {
         @Override
         protected Void doInBackground() throws Exception
         {
            // NB bv configuratie_regels[2]  = TCP_HOST_NAME_TXT + TCP_host_name
            String volledig_path = user_dir + java.io.File.separator + CONFIGURATION_FILE;

            //JOptionPane.showMessageDialog(null, hulp_dir, APPLICATION_NAME + " hulp_dir", JOptionPane.WARNING_MESSAGE);
            try
            {
               BufferedWriter out = new BufferedWriter(new FileWriter(volledig_path, false));   // no append

               for (int i = 0; i < MAX_AANTAL_CONFIGURATIEREGELS; i++)
               {
                  if ((configuratie_regels[i] != null) && (configuratie_regels[i].compareTo("") != 0))
                  {
                     out.write(configuratie_regels[i]);
                     out.newLine();   // newLine(): write a line separator. The line separator string is defined by the system property line.separator, and is not necessarily a single newline ('\n') character.
                  }
               } // for (int i = 0; i < MAX_AANTAL_CONFIGURATIEREGELS; i++)

                  out.close();
            } // try
            catch (Exception e)
            {
               JOptionPane.showMessageDialog(null, "unable to write to: " + volledig_path, APPLICATION_NAME + " error", JOptionPane.WARNING_MESSAGE);
            } // catch

            return null;

         } // protected Void doInBackground() throws Exception
      }.execute(); // new SwingWorker<Void, Void>()      
      
   }
   
   
   
   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/    
   private void initComponents2()
   {
      // maximise main screen
      this.setExtendedState(java.awt.Frame.MAXIMIZED_BOTH);
      
       Toolkit kit = Toolkit.getDefaultToolkit();
      Dimension screenSize = kit.getScreenSize();
      int screenWidth = screenSize.width;
      int screenHeight = screenSize.height;
      
      jLabel1.setSize(screenWidth, screenHeight);
      
      // user directory 
      user_dir = System.getProperty("user.dir");
      
      
      // all specific RS232 and RS422 functions
      RS422_comm = new RS422();      
      
      // global vars
      lees_configuratie_regels();
      
      //
      //
      //jTextField1.setForeground(Color.BLUE);
      
   }
   
   
   /***********************************************************************************************************/
   /*                                                                                                         */
   /*                                                                                                         */
   /*                                                                                                         */
   /***********************************************************************************************************/
   private void File_Exit_menu_item_actionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_File_Exit_menu_item_actionPerformed
      // TODO add your handling code here:
      String info = "Are you sure you want to exit " + APPLICATION_NAME;
      String str_exit = "Exit";

           
      int result = JOptionPane.showConfirmDialog(main_wow.this, info, str_exit + " " + APPLICATION_NAME, JOptionPane.YES_NO_OPTION);
      if (result == JOptionPane.YES_OPTION)
      {
         System.exit(0);     
      }      
   }//GEN-LAST:event_File_Exit_menu_item_actionPerformed

    
   
   /***********************************************************************************************************/
   /*                                                                                                         */
   /*                                                                                                         */
   /*                                                                                                         */
   /***********************************************************************************************************/
   private void Info_About_menu_item_actionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Info_About_menu_item_actionPerformed
      // TODO add your handling code here:
      
      wow_about form = new wow_about();               
      form.setSize(400, 300);
      form.setVisible(true);       
   }//GEN-LAST:event_Info_About_menu_item_actionPerformed

   
   
   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/    
   private void main_wow_windowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_main_wow_windowClosing
      // TODO add your handling code here:
      String info = "Are you sure you want to exit " + APPLICATION_NAME;
      String str_exit = "Exit";

      
      int result = JOptionPane.showConfirmDialog(main_wow.this, info, str_exit + " " + APPLICATION_NAME, JOptionPane.YES_NO_OPTION);
      if (result == JOptionPane.YES_OPTION)
      {
         System.exit(0);     
      }          
   }//GEN-LAST:event_main_wow_windowClosing

   
   
   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
   private void Edit_ASTRON_menu_item_actionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Edit_ASTRON_menu_item_actionPerformed
      // TODO add your handling code here:
      
      wow_astron form = new wow_astron();               
      form.setSize(1000, 750);
      form.setVisible(true);       
      
   }//GEN-LAST:event_Edit_ASTRON_menu_item_actionPerformed

   
   
   /***********************************************************************************************/
   /*                                                                                             */
   /*                                                                                             */
   /*                                                                                             */
   /***********************************************************************************************/
   private void bepaal_frame_location()
   {
      Toolkit kit = Toolkit.getDefaultToolkit();
      Dimension screenSize = kit.getScreenSize();
      int screenWidth = screenSize.width;
      int screenHeight = screenSize.height;
      
      // compute position of info-about screen
      x_pos_small_frame = screenWidth / 2 - (400 / 2);
      y_pos_small_frame = screenHeight / 2 - (300 / 2);
      
      
      // compute position of edit screens (eg ASTRON settings)
      x_pos_edit_frame = screenWidth / 2 - (1000 / 2);
      y_pos_edit_frame = screenHeight / 2 - (750 / 2);
   }      
   
   
   
   /**
    * @param args the command line arguments
    */
   public static void main(String args[]) {
      /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
       * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
       */
      try {
         for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
            if ("Nimbus".equals(info.getName())) {
               javax.swing.UIManager.setLookAndFeel(info.getClassName());
               break;
            }
         }
      } catch (ClassNotFoundException ex) {
         java.util.logging.Logger.getLogger(main_wow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      } catch (InstantiationException ex) {
         java.util.logging.Logger.getLogger(main_wow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      } catch (IllegalAccessException ex) {
         java.util.logging.Logger.getLogger(main_wow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      } catch (javax.swing.UnsupportedLookAndFeelException ex) {
         java.util.logging.Logger.getLogger(main_wow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      }
        //</editor-fold>

      /* Create and display the form */
      java.awt.EventQueue.invokeLater(new Runnable() {
         @Override
         public void run() {
            new main_wow().setVisible(true);
         }
      });
   }

   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JLabel jLabel1;
   private javax.swing.JMenu jMenu1;
   private javax.swing.JMenu jMenu2;
   private javax.swing.JMenu jMenu3;
   private javax.swing.JMenuBar jMenuBar1;
   private javax.swing.JMenuItem jMenuItem1;
   private javax.swing.JMenuItem jMenuItem2;
   private javax.swing.JMenuItem jMenuItem3;
   public static javax.swing.JTextField jTextField1;
   // End of variables declaration//GEN-END:variables

   
   // constanten
   public static final int CONFIGURATION_FILE_POS_INHOUD         = 21;               // eg "van wind source        : estimated; true speed and true direction"de pos waar estimated begint
   public final static String CONFIGURATION_FILE                 = "configuration.txt";
   public final static int MAX_AANTAL_CONFIGURATIEREGELS         = 50; 
   public final static String APPLICATION_NAME                   = "SIAM-TO-WOW";
   public final static int COM_bps                               = 1200;
   public final static int COM_data_bits                         = 7;
   public final static int COM_parity                            = SerialPort.PARITY_EVEN;    // 2 = even
   public final static int COM_stop_bits                         = 2;
   public final static int COM_flow_control                      = SerialPort.FLOWCONTROL_NONE;   
   public static final String NPORT_REAL_COM_MODE                = "nport_real_com_mode";
   public static final String NPORT_TCP_MODE                     = "nport_tcp_mode";
   public static final String COMMUNICATION_MODE_TXT             = "comm mode          : ";   // t/m : is 20 characters
   public static final String COM_PORT_TXT                       = "COM port           : ";   // t/m : is 20 characters
   public static final String TCP_HOST_NAME_TXT                  = "TCP host name      : ";   // t/m : is 20 characters
   public static final String TCP_PORT_TXT                       = "TCP port           : ";   // t/m : is 20 characters
   
   // vars
   
   private RS422 RS422_comm;
   
   public static int x_pos_small_frame;
   public static int y_pos_small_frame;
   public static int x_pos_edit_frame;
   public static int y_pos_edit_frame;
   public static String user_dir;
   public static String COM_port_name                            = ""; 
   public static String TCP_host_name                            = "";   
   public static String TCP_port_name                            = "";  
   public static String communication_mode                       = "";
      
   public static String[] configuratie_regels                    = new String[MAX_AANTAL_CONFIGURATIEREGELS];// default values: null   

}
